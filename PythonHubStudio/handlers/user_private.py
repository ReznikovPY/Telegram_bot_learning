from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command, or_f
from aiogram.enums import ParseMode
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from filters.chat_types import ChatTypeFilter

from PythonHubStudio.keyboards import reply
from pydantic import BaseModel, ConfigDict

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


# @user_private_router.message(CommandStart())
# async def start_cmd(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫", reply_markup=reply.test_kb)

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫",
                         reply_markup=reply.start_kb3.as_markup(
                             resize_keyboard=True,
                             input_field_placeholder='–©–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?'))

# @user_private_router.message(F.text.lower() == "–º–µ–Ω—é")
@user_private_router.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message):
    await message.answer("–û—Å—å –º–µ–Ω—é:")
# –í await message.answer("–û—Å—å –º–µ–Ω—é:") –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
# –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É–± –ø–µ—Ä–µ–¥–∞—î–º–æ reply_markup=reply.del_kbd
#------------------------------------------




@user_private_router.message(F.text.lower() == "–Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏")
@user_private_router.message(Command("services"))
async def about_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold('–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏'),
            '–ú–∞–Ω—ñ–∫—é—Ä',
            '–ü–µ–¥—ñ–∫—é—Ä',
            '–°—Ç—Ä–∏–∂–∫–∞',
            marker='‚úÖ'
        ),
        as_marked_section(
            Bold('–ù–µ –Ω–∞–¥–∞—î–º–æ:'),
            '–ï–ø—ñ–ª—è—Ü—ñ—è –∞–Ω—É—Å–∞',
            '–†–µ–º–æ–Ω—Ç —Ç–æ—Å—Ç–µ—Ä—ñ–≤',
            marker='‚ùå'
        ),
        sep='\n-------------\n'
    )
    await message.answer(text.as_html())


@user_private_router.message(F.text.lower() == "–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–ª–∞—Ç–∏")
@user_private_router.message(Command("payment"))
async def payment_cmd(message: types.Message):
    text = as_marked_section(
        Bold('–í–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–ª–∞—Ç–∏:'),
        '–ì—Ä–æ—à–∏–º–∞',
        '–ë—É—Ö–ª–æ–º',
        '–ú–µ—Ä—Ç–≤–∏–º–∏ –º–æ—Å–∫–∞–ª—è–º–∏',
        marker='üëâ'
    )
    await message.answer(text.as_html())


# @user_private_router.message(F.text.lower() == "–í–∞—à—ñ –¥–∞–Ω—ñ")
# @user_private_router.message(Command("your_data"))
# async def get_contact(message: types.Message):
#     await message.answer("Your data",
#                          reply_markup=reply.test_kb)

# @user_private_router.message((F.text.lower().contains('–¥–æ—Å—Ç–∞–≤–∫')) | (F.text.lower() == '–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'))
# @user_private_router.message(Command("shipping"))
# async def menu_cmd(message: types.Message):
#     text = as_list(
#         as_marked_section(
#             Bold('–í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:üöö'),
#             '–ö—É—Ä—î—Ä',
#             '–°–∞–º–æ–≤–∏–≤—ñ–∑',
#             '–ù–æ–≤–∞ –ø–æ—à—Ç–∞',
#             marker='‚úÖ'
#         ),
#         as_marked_section(
#             Bold('–ù–µ –¥—Å—Å—Ç–∞–≤–ª—è—î–º–æ:'),
#             '–£–∫—Ä –ø–æ—à—Ç–∞',
#             '–ì–æ–ª—É–±–∏',
#             marker='‚ùå'
#         ),
#         sep='\n-------------\n'
#     )
#     await message.answer(text.as_html())


@user_private_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f'–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–∏–π')
    await message.answer(F.contact.phone_number)

@user_private_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f'–ª–æ–∫–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∏–π')
    await message.answer(F.location)


# @user_private_router.message(F.content_type == ContentType.CONTACT)
# async def handle_contact(message: types.Message):
#     phone_number = message.contact.phone_number
#     await message.answer(F.user.id, phone_number)

# https://www.instagram.com/my_crazy_house_/